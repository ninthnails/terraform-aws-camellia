# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ kafka_broker_id }}

# Rack of the broker. This will be used in rack aware replication assignment for fault tolerance.
broker.rack={{ kafka_broker_rack }}

# Enable controlled shutdown of the server
controlled.shutdown.enable=true

# Specify which version of the inter-broker protocol will be used.
inter.broker.protocol.version={{ kafka_api_version }}

# Configures kafka broker to request client authentication
# TODO Enable client auth: required
ssl.client.auth=none

# The list of protocols enabled for SSL connections.
ssl.enabled.protocols=TLSv1.2

# The SSL protocol used to generate the SSLContext.
ssl.protocol=TLSv1.2

# TODO Keystore and trust store
## The location of the key store file
#ssl.keystore.location=/var/private/ssl/kafka/keystore.jks
#
## The store password for the key store file
#ssl.keystore.password=
#
## The password of the private key in the key store file
#ssl.key.password=
#
## The location of the trust store file
#ssl.truststore.location=/var/private/ssl/kafka/truststore.jks
#
## The password for the trust store file
#ssl.truststore.password=

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners=BROKER://:9091,CLIENT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=BROKER://:9091,CLIENT://:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
listener.security.protocol.map=BROKER:PLAINTEXT,CLIENT:PLAINTEXT

# Name of listener used for communication between brokers.
inter.broker.listener.name=BROKER

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=5

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# Number of fetcher threads used to replicate messages from a source broker.
num.replica.fetchers=4

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ kafka_log_dirs_path }}

# Specify the message format version the broker will use to append messages to the logs.
log.message.format.version={{ kafka_api_version }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across the brokers.
num.partitions=3

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Replica #############################

# Default replication factors for automatically created topics.
default.replication.factor=3

min.insync.replicas=2

# If a follower hasn't sent any fetch requests or hasn't consumed up to the leaders log end offset
# for at least this time, the leader will remove the follower from isr
replica.lag.time.max.ms=15000

# The number of bytes of messages to attempt to fetch for each partition
replica.fetch.max.bytes=2097152

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=3

# The replication factor for the transaction topic (set higher to ensure availability).
# Internal topic creation will fail until the cluster size meets this replication factor requirement.
transaction.state.log.replication.factor=3

# Overridden min.insync.replicas config for the transaction topic.
transaction.state.log.min.isr=2

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

# After a consumer group loses all its consumers its offsets will be kept for this retention period before getting discarded.
offsets.retention.minutes=10080

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000

# Set client to use secure ACLs.
zookeeper.set.acl=false

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=300

# The maximum allowed session timeout for registered consumers.
group.max.session.timeout.ms=360000


# Enable auto creation of topic on the server.
# NOTE: Need auto creation for Cruise Control topics.
auto.create.topics.enable=true

# Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
unclean.leader.election.enable=false

# Enables auto leader balancing. A background thread checks and triggers leader balance if required at regular intervals.
auto.leader.rebalance.enable=true

############################# ACL #############################

# If no resource patterns match a specific resource, then the resource has no associated ACLs.
allow.everyone.if.no.acl.found=true

